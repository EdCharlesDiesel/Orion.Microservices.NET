// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Orion.DataAccess.Postgres.Data;

#nullable disable

namespace Orion.DataAccess.Postgres.Data.Migrations
{
    [DbContext(typeof(OrionDbContext))]
    partial class OrionDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Address", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AddressID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AddressID"));

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("AddressLine1");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("AddressLine2");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("City");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("PostalCode");

                    b.Property<int>("StateProvinceID")
                        .HasColumnType("int")
                        .HasColumnName("StateProvinceID");

                    b.Property<Guid>("rowguid")
                        .HasColumnType("uuid")
                        .HasColumnName("rowguid");

                    b.HasKey("AddressID");

                    b.HasIndex("StateProvinceID");

                    b.ToTable("Person.Address", "Person");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.AddressType", b =>
                {
                    b.Property<int>("AddressTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AddressTypeID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AddressTypeId"));

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Name");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uuid")
                        .HasColumnName("rowguid");

                    b.HasKey("AddressTypeId");

                    b.ToTable("AddressType", "Person");

                    b.HasData(
                        new
                        {
                            AddressTypeId = 1,
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Billing",
                            Rowguid = new Guid("53626e83-8cd4-42e7-b986-a838695d3806")
                        },
                        new
                        {
                            AddressTypeId = 2,
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Home",
                            Rowguid = new Guid("399c2336-18e6-4ff6-8f4e-952354a16160")
                        },
                        new
                        {
                            AddressTypeId = 3,
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Main Office",
                            Rowguid = new Guid("db710382-4bf3-473b-a592-203fcbf8a157")
                        },
                        new
                        {
                            AddressTypeId = 4,
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Primary",
                            Rowguid = new Guid("e5694c46-4f39-416b-b9df-4fad01cdd65f")
                        },
                        new
                        {
                            AddressTypeId = 5,
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Shipping",
                            Rowguid = new Guid("464cc394-6b5d-4974-975e-9f1a49176348")
                        },
                        new
                        {
                            AddressTypeId = 6,
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Archive",
                            Rowguid = new Guid("72a58d3c-2393-4ea3-b74b-bbb5ba0f6445")
                        });
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.BillOfMaterials", b =>
                {
                    b.Property<int>("BillOfMaterialsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BillOfMaterialsID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BillOfMaterialsId"));

                    b.Property<short>("BomLevel")
                        .HasColumnType("smallint")
                        .HasColumnName("BOMLevel");

                    b.Property<int>("ComponentID")
                        .HasColumnType("int");

                    b.Property<int>("ComponentId")
                        .HasColumnType("int")
                        .HasColumnName("ComponentID");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("EndDate");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<decimal>("PerAssemblyQty")
                        .HasColumnType("decimal")
                        .HasColumnName("PerAssemblyQty");

                    b.Property<int>("ProductAssemblyID")
                        .HasColumnType("int");

                    b.Property<int?>("ProductAssemblyId")
                        .HasColumnType("int")
                        .HasColumnName("ProductAssemblyID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("StartDate");

                    b.Property<string>("UnitMeasureCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nchar")
                        .HasColumnName("UnitMeasureCode");

                    b.HasKey("BillOfMaterialsId");

                    b.HasIndex("ComponentID");

                    b.HasIndex("ProductAssemblyID");

                    b.HasIndex("UnitMeasureCode");

                    b.ToTable("Production.BillOfMaterials", t =>
                        {
                            t.Property("ComponentID")
                                .HasColumnName("ComponentID1");

                            t.Property("ProductAssemblyID")
                                .HasColumnName("ProductAssemblyID1");
                        });
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.BuildVersion", b =>
                {
                    b.Property<int>("SystemInformationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SystemInformationID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SystemInformationID"));

                    b.Property<string>("DatabaseVersion")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("Database Version");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<DateTime>("VersionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("VersionDate");

                    b.HasKey("SystemInformationID");

                    b.ToTable("BuildVersion", "public");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.BusinessEntity", b =>
                {
                    b.Property<int>("BusinessEntityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BusinessEntityID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BusinessEntityID"));

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uuid")
                        .HasColumnName("rowguid");

                    b.HasKey("BusinessEntityID");

                    b.ToTable("BusinessEntity", "Person");

                    b.HasData(
                        new
                        {
                            BusinessEntityID = 1,
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Rowguid = new Guid("c865b9e7-a105-4c3f-aedc-d046a6535f4a")
                        });
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.BusinessEntityAddress", b =>
                {
                    b.Property<int>("BusinessEntityID")
                        .HasColumnType("int")
                        .HasColumnName("BusinessEntityID")
                        .HasColumnOrder(1);

                    b.Property<int>("AddressID")
                        .HasColumnType("int")
                        .HasColumnName("AddressID")
                        .HasColumnOrder(2);

                    b.Property<int>("AddressTypeID")
                        .HasColumnType("int")
                        .HasColumnName("AddressTypeID")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<Guid>("rowguid")
                        .HasColumnType("uuid")
                        .HasColumnName("rowguid");

                    b.HasKey("BusinessEntityID", "AddressID");

                    b.HasIndex("AddressID");

                    b.HasIndex("AddressTypeID");

                    b.ToTable("Person.BusinessEntityAddress");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.BusinessEntityContact", b =>
                {
                    b.Property<int>("BusinessEntityID")
                        .HasColumnType("int")
                        .HasColumnName("BusinessEntityID")
                        .HasColumnOrder(1);

                    b.Property<int>("PersonID")
                        .HasColumnType("int")
                        .HasColumnName("PersonID")
                        .HasColumnOrder(2);

                    b.Property<int>("ContactTypeID")
                        .HasColumnType("int")
                        .HasColumnName("ContactTypeID")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<Guid>("rowguid")
                        .HasColumnType("uuid")
                        .HasColumnName("rowguid");

                    b.HasKey("BusinessEntityID", "PersonID", "ContactTypeID");

                    b.HasIndex("ContactTypeID");

                    b.ToTable("Person.BusinessEntityContact");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.ContactCreditCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("ContactCreditCards");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.ContactType", b =>
                {
                    b.Property<int>("ContactTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ContactTypeID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ContactTypeID"));

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Name");

                    b.HasKey("ContactTypeID");

                    b.ToTable("Person.ContactType");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.CountryRegion", b =>
                {
                    b.Property<string>("CountryRegionCode")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("CountryRegionCode");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Name");

                    b.HasKey("CountryRegionCode");

                    b.ToTable("Person.CountryRegion");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.CountryRegionCurrency", b =>
                {
                    b.Property<string>("CurrencyCode")
                        .HasMaxLength(3)
                        .HasColumnType("nchar")
                        .HasColumnName("CurrencyCode")
                        .HasColumnOrder(2);

                    b.Property<string>("CountryRegionCode")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("CountryRegionCode")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.HasKey("CurrencyCode", "CountryRegionCode");

                    b.HasIndex("CountryRegionCode");

                    b.ToTable("Sales.CountryRegionCurrency");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("integer");

                    b.Property<int?>("EmployeeBusinessEntityID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeBusinessEntityID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.CreditCard", b =>
                {
                    b.Property<int>("CreditCardID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CreditCardID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CreditCardID"));

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("CardNumber");

                    b.Property<string>("CardType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("CardType");

                    b.Property<byte>("ExpMonth")
                        .HasColumnType("smallint")
                        .HasColumnName("ExpMonth");

                    b.Property<short>("ExpYear")
                        .HasColumnType("smallint")
                        .HasColumnName("ExpYear");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.HasKey("CreditCardID");

                    b.ToTable("Sales.CreditCard");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Culture", b =>
                {
                    b.Property<string>("CultureID")
                        .HasMaxLength(6)
                        .HasColumnType("nchar")
                        .HasColumnName("CultureID");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Name");

                    b.HasKey("CultureID");

                    b.ToTable("Production.Culture");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Currency", b =>
                {
                    b.Property<string>("CurrencyCode")
                        .HasMaxLength(3)
                        .HasColumnType("nchar")
                        .HasColumnName("CurrencyCode");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Name");

                    b.HasKey("CurrencyCode");

                    b.ToTable("Sales.Currency");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.CurrencyRate", b =>
                {
                    b.Property<int>("CurrencyRateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CurrencyRateID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CurrencyRateID"));

                    b.Property<decimal>("AverageRate")
                        .HasColumnType("money")
                        .HasColumnName("AverageRate");

                    b.Property<DateTime>("CurrencyRateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CurrencyRateDate");

                    b.Property<decimal>("EndOfDayRate")
                        .HasColumnType("money")
                        .HasColumnName("EndOfDayRate");

                    b.Property<string>("FromCurrencyCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nchar")
                        .HasColumnName("FromCurrencyCode");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<string>("ToCurrencyCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nchar")
                        .HasColumnName("ToCurrencyCode");

                    b.HasKey("CurrencyRateID");

                    b.HasIndex("FromCurrencyCode");

                    b.HasIndex("ToCurrencyCode");

                    b.ToTable("Sales.CurrencyRate");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustomerID"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(10)
                        .HasColumnType("varchar")
                        .HasColumnName("AccountNumber");

                    b.Property<int>("BusinessEntityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<int?>("PersonID")
                        .HasColumnType("int")
                        .HasColumnName("PersonID");

                    b.Property<int?>("StoreID")
                        .HasColumnType("int")
                        .HasColumnName("StoreID");

                    b.Property<int?>("TerritoryID")
                        .HasColumnType("int")
                        .HasColumnName("TerritoryID");

                    b.Property<Guid>("rowguid")
                        .HasColumnType("uuid")
                        .HasColumnName("rowguid");

                    b.HasKey("CustomerID");

                    b.HasIndex("BusinessEntityID");

                    b.HasIndex("TerritoryID");

                    b.ToTable("Sales.Customer");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.CustomerAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("CustomerAddresses");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.DatabaseLog", b =>
                {
                    b.Property<int>("DatabaseLogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DatabaseLogID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DatabaseLogID"));

                    b.Property<string>("DatabaseUser")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("DatabaseUser");

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("Event");

                    b.Property<string>("Object")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("Object");

                    b.Property<DateTime>("PostTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("PostTime");

                    b.Property<string>("Schema")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("Schema");

                    b.Property<string>("TSQL")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("TSQL");

                    b.Property<string>("XmlEvent")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XmlEvent");

                    b.HasKey("DatabaseLogID");

                    b.ToTable("DatabaseLog");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Department", b =>
                {
                    b.Property<int>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DepartmentID"));

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("GroupName");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Name");

                    b.HasKey("DepartmentID");

                    b.ToTable("Department", "HumanResources");

                    b.HasData(
                        new
                        {
                            DepartmentID = 1,
                            GroupName = "Research and Development",
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Engineering"
                        },
                        new
                        {
                            DepartmentID = 2,
                            GroupName = "Research and Development",
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Tool Design"
                        },
                        new
                        {
                            DepartmentID = 3,
                            GroupName = "Sales and Marketing",
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Sales"
                        },
                        new
                        {
                            DepartmentID = 4,
                            GroupName = "Sales and Marketing",
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Marketing"
                        },
                        new
                        {
                            DepartmentID = 5,
                            GroupName = "Inventory Management",
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Purchasing"
                        },
                        new
                        {
                            DepartmentID = 6,
                            GroupName = "Research and Development",
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Research and Development"
                        },
                        new
                        {
                            DepartmentID = 7,
                            GroupName = "Manufacturing",
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Production"
                        },
                        new
                        {
                            DepartmentID = 8,
                            GroupName = "Manufacturing",
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Production Control"
                        },
                        new
                        {
                            DepartmentID = 9,
                            GroupName = "Executive General and Administration",
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Human Resources"
                        },
                        new
                        {
                            DepartmentID = 10,
                            GroupName = "Executive General and Administration",
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Finance"
                        },
                        new
                        {
                            DepartmentID = 11,
                            GroupName = "Executive General and Administration",
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Information Services"
                        },
                        new
                        {
                            DepartmentID = 12,
                            GroupName = "Quality Assurance",
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Sales"
                        },
                        new
                        {
                            DepartmentID = 13,
                            GroupName = "Quality Assurance",
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Quality Assurance"
                        },
                        new
                        {
                            DepartmentID = 14,
                            GroupName = "Executive General and Administration",
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Facilities and Maintenance"
                        },
                        new
                        {
                            DepartmentID = 15,
                            GroupName = "Sales and Inventory Management",
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Shipping and Receiving"
                        },
                        new
                        {
                            DepartmentID = 16,
                            GroupName = "Executive General and Administration",
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Executive"
                        });
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Document", b =>
                {
                    b.Property<int>("BusinessEntityID")
                        .HasColumnType("int")
                        .HasColumnName("BusinessEntityID");

                    b.Property<int>("ChangeNumber")
                        .HasColumnType("int")
                        .HasColumnName("ChangeNumber");

                    b.Property<byte[]>("CompleteDocument")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("Document");

                    b.Property<short?>("DocumentLevel")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("smallint")
                        .HasColumnName("DocumentLevel");

                    b.Property<string>("DocumentSummary")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("DocumentSummary");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("FileExtension");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("FileName");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<int>("Owner")
                        .HasColumnType("int")
                        .HasColumnName("Owner");

                    b.Property<string>("Revision")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nchar")
                        .HasColumnName("Revision");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("Status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Title");

                    b.Property<Guid>("rowguid")
                        .HasColumnType("uuid")
                        .HasColumnName("rowguid");

                    b.HasKey("BusinessEntityID");

                    b.ToTable("Production.Document");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.EmailAddress", b =>
                {
                    b.Property<int>("BusinessEntityID")
                        .HasColumnType("int")
                        .HasColumnName("BusinessEntityID")
                        .HasColumnOrder(1);

                    b.Property<int>("EmailAddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmailAddressID")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EmailAddressID"));

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<string>("PersonalEmailAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("EmailAddress");

                    b.Property<Guid>("rowguid")
                        .HasColumnType("uuid")
                        .HasColumnName("rowguid");

                    b.HasKey("BusinessEntityID", "EmailAddressID");

                    b.ToTable("Person.EmailAddress");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Employee", b =>
                {
                    b.Property<int>("BusinessEntityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BusinessEntityID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BusinessEntityID"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("BirthDate");

                    b.Property<int>("EntityVersion")
                        .HasColumnType("integer");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nchar")
                        .HasColumnName("Gender");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("date")
                        .HasColumnName("HireDate");

                    b.Property<int>("JobLevel")
                        .HasColumnType("integer");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("JobTitle");

                    b.Property<string>("LoginID")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("LoginID");

                    b.Property<string>("MaritalStatus")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nchar")
                        .HasColumnName("MaritalStatus");

                    b.Property<bool>("MinimumRaiseGiven")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<string>("NationalIDNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("NationalIDNumber");

                    b.Property<short?>("OrganizationLevel")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("smallint")
                        .HasColumnName("OrganizationLevel");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uuid")
                        .HasColumnName("rowguid");

                    b.Property<int>("Salary")
                        .HasColumnType("integer");

                    b.Property<short>("SickLeaveHours")
                        .HasColumnType("smallint")
                        .HasColumnName("SickLeaveHours");

                    b.Property<int>("SuggestedBonus")
                        .HasColumnType("integer");

                    b.Property<short>("VacationHours")
                        .HasColumnType("smallint")
                        .HasColumnName("VacationHours");

                    b.Property<int>("YearsInService")
                        .HasColumnType("integer");

                    b.HasKey("BusinessEntityID");

                    b.ToTable("Employee", "HumanResources");

                    b.HasData(
                        new
                        {
                            BusinessEntityID = 1,
                            BirthDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EntityVersion = 1,
                            Gender = "M",
                            HireDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            JobLevel = 1,
                            JobTitle = "Chief Executive Officer",
                            LoginID = "adventure-works\\ken0",
                            MaritalStatus = "S",
                            MinimumRaiseGiven = false,
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            NationalIDNumber = "295847284",
                            OrganizationLevel = (short)1,
                            Rowguid = new Guid("3b63bfef-5316-4f9f-a678-de74ee9a5ef1"),
                            Salary = 5000,
                            SickLeaveHours = (short)3,
                            SuggestedBonus = 200,
                            VacationHours = (short)0,
                            YearsInService = 10
                        });
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.EmployeeDepartmentHistory", b =>
                {
                    b.Property<int>("BusinessEntityID")
                        .HasColumnType("int")
                        .HasColumnName("BusinessEntityID")
                        .HasColumnOrder(1);

                    b.Property<short>("DepartmentID")
                        .HasColumnType("smallint")
                        .HasColumnName("DepartmentID")
                        .HasColumnOrder(3);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("EndDate");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<int>("ShiftID")
                        .HasColumnType("integer")
                        .HasColumnName("ShiftID")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("StartDate")
                        .HasColumnOrder(2);

                    b.HasKey("BusinessEntityID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("ShiftID");

                    b.ToTable("EmployeeDepartmentHistory", "HumanResources");

                    b.HasData(
                        new
                        {
                            BusinessEntityID = 1,
                            DepartmentID = (short)16,
                            EndDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ShiftID = 1,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.EmployeePayHistory", b =>
                {
                    b.Property<int>("BusinessEntityID")
                        .HasColumnType("int")
                        .HasColumnName("BusinessEntityID")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<byte>("PayFrequency")
                        .HasColumnType("smallint")
                        .HasColumnName("PayFrequency");

                    b.Property<decimal>("Rate")
                        .HasColumnType("money")
                        .HasColumnName("Rate");

                    b.Property<DateTime?>("RateChangeDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("RateChangeDate")
                        .HasColumnOrder(2);

                    b.HasKey("BusinessEntityID");

                    b.ToTable("EmployeePayHistory", "HumanResources");

                    b.HasData(
                        new
                        {
                            BusinessEntityID = 1,
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PayFrequency = (byte)2,
                            Rate = 125.5m,
                            RateChangeDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.ErrorLog", b =>
                {
                    b.Property<int>("ErrorLogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ErrorLogID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ErrorLogID"));

                    b.Property<int?>("ErrorLine")
                        .HasColumnType("int")
                        .HasColumnName("ErrorLine");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)")
                        .HasColumnName("ErrorMessage");

                    b.Property<int>("ErrorNumber")
                        .HasColumnType("int")
                        .HasColumnName("ErrorNumber");

                    b.Property<string>("ErrorProcedure")
                        .HasMaxLength(126)
                        .HasColumnType("character varying(126)")
                        .HasColumnName("ErrorProcedure");

                    b.Property<int?>("ErrorSeverity")
                        .HasColumnType("int")
                        .HasColumnName("ErrorSeverity");

                    b.Property<int?>("ErrorState")
                        .HasColumnType("int")
                        .HasColumnName("ErrorState");

                    b.Property<DateTimeOffset>("ErrorTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ErrorTime");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("UserName");

                    b.HasKey("ErrorLogID");

                    b.ToTable("ErrorLog");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Illustration", b =>
                {
                    b.Property<int>("IllustrationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IllustrationID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IllustrationID"));

                    b.Property<string>("Diagram")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("Diagram");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.HasKey("IllustrationID");

                    b.ToTable("Production.Illustration");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Individual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Individuals");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.JobCandidate", b =>
                {
                    b.Property<int>("JobCandidateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("JobCandidateID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("JobCandidateID"));

                    b.Property<int?>("BusinessEntityID")
                        .HasColumnType("int")
                        .HasColumnName("BusinessEntityID");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<string>("Resume")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Resume");

                    b.HasKey("JobCandidateID");

                    b.HasIndex("BusinessEntityID");

                    b.ToTable("JobCandidate", "HumanResources");

                    b.HasData(
                        new
                        {
                            JobCandidateID = 1,
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Resume = "LinkedIn"
                        },
                        new
                        {
                            JobCandidateID = 2,
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Resume = "LinkedIn"
                        });
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Location", b =>
                {
                    b.Property<short>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("LocationID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("LocationID"));

                    b.Property<decimal>("Availability")
                        .HasColumnType("decimal")
                        .HasColumnName("Availability");

                    b.Property<decimal>("CostRate")
                        .HasColumnType("numeric")
                        .HasColumnName("CostRate");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Name");

                    b.HasKey("LocationID");

                    b.ToTable("Production.Location");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.OrionCalendarEvent", b =>
                {
                    b.Property<int>("OrionCalendarEventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrionCalendarEventID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrionCalendarEventID"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Employee ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EmployeeID"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("JobLevel")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReferenceDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Salary")
                        .HasColumnType("numeric");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("SuggestedBonus")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("YearsInService")
                        .HasColumnType("integer");

                    b.HasKey("OrionCalendarEventID");

                    b.ToTable("OrionCalendarEvent");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Password", b =>
                {
                    b.Property<int>("BusinessEntityID")
                        .HasColumnType("int")
                        .HasColumnName("BusinessEntityID");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar")
                        .HasColumnName("PasswordHash");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar")
                        .HasColumnName("PasswordSalt");

                    b.Property<Guid>("rowguid")
                        .HasColumnType("uuid")
                        .HasColumnName("rowguid");

                    b.HasKey("BusinessEntityID");

                    b.ToTable("Person.Password");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Person", b =>
                {
                    b.Property<int>("BusinessEntityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BusinessEntityID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BusinessEntityID"));

                    b.Property<string>("AdditionalContactInfo")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("AdditionalContactInfo");

                    b.Property<int>("BusinessEntityID1")
                        .HasColumnType("int");

                    b.Property<string>("Demographics")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("Demographics");

                    b.Property<int>("EmailPromotion")
                        .HasColumnType("int")
                        .HasColumnName("EmailPromotion");

                    b.Property<int?>("EmployeeBusinessEntityID")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("LastName");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("MiddleName");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<string>("PersonType")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nchar")
                        .HasColumnName("PersonType");

                    b.Property<string>("Suffix")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("Suffix");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("Title");

                    b.Property<Guid>("rowguid")
                        .HasColumnType("uuid")
                        .HasColumnName("rowguid");

                    b.HasKey("BusinessEntityID");

                    b.HasIndex("BusinessEntityID1");

                    b.HasIndex("EmployeeBusinessEntityID");

                    b.ToTable("Person", (string)null);
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.PersonCreditCard", b =>
                {
                    b.Property<int>("BusinessEntityID")
                        .HasColumnType("int")
                        .HasColumnName("BusinessEntityID")
                        .HasColumnOrder(1);

                    b.Property<int>("CreditCardID")
                        .HasColumnType("int")
                        .HasColumnName("CreditCardID")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.HasKey("BusinessEntityID", "CreditCardID");

                    b.HasIndex("CreditCardID");

                    b.ToTable("Sales.PersonCreditCard");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.PersonPhone", b =>
                {
                    b.Property<int>("BusinessEntityID")
                        .HasColumnType("int")
                        .HasColumnName("BusinessEntityID")
                        .HasColumnOrder(1);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("PhoneNumber")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<int>("PhoneNumberTypeID")
                        .HasColumnType("int")
                        .HasColumnName("PhoneNumberTypeID")
                        .HasColumnOrder(3);

                    b.HasKey("BusinessEntityID", "PhoneNumber");

                    b.HasIndex("PhoneNumberTypeID");

                    b.ToTable("Person.PersonPhone");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.PhoneNumberType", b =>
                {
                    b.Property<int>("PhoneNumberTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PhoneNumberTypeID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PhoneNumberTypeID"));

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Name");

                    b.HasKey("PhoneNumberTypeID");

                    b.ToTable("Person.PhoneNumberType");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductID"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nchar")
                        .HasColumnName("Class");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("Color");

                    b.Property<int>("DaysToManufacture")
                        .HasColumnType("int")
                        .HasColumnName("DaysToManufacture");

                    b.Property<DateTime?>("DiscontinuedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DiscontinuedDate");

                    b.Property<decimal>("ListPrice")
                        .HasColumnType("money")
                        .HasColumnName("ListPrice");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Name");

                    b.Property<string>("ProductLine")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nchar")
                        .HasColumnName("ProductLine");

                    b.Property<int?>("ProductModelID")
                        .HasColumnType("int")
                        .HasColumnName("ProductModelID");

                    b.Property<string>("ProductNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("ProductNumber");

                    b.Property<int?>("ProductSubcategoryID")
                        .HasColumnType("int")
                        .HasColumnName("ProductSubcategoryID");

                    b.Property<short>("ReorderPoint")
                        .HasColumnType("smallint")
                        .HasColumnName("ReorderPoint");

                    b.Property<short>("SafetyStockLevel")
                        .HasColumnType("smallint")
                        .HasColumnName("SafetyStockLevel");

                    b.Property<DateTime?>("SellEndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("SellEndDate");

                    b.Property<DateTime>("SellStartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("SellStartDate");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("Size");

                    b.Property<string>("SizeUnitMeasureCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nchar")
                        .HasColumnName("SizeUnitMeasureCode");

                    b.Property<decimal>("StandardCost")
                        .HasColumnType("money")
                        .HasColumnName("StandardCost");

                    b.Property<string>("Style")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nchar")
                        .HasColumnName("Style");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal")
                        .HasColumnName("Weight");

                    b.Property<string>("WeightUnitMeasureCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nchar")
                        .HasColumnName("WeightUnitMeasureCode");

                    b.Property<Guid>("rowguid")
                        .HasColumnType("uuid")
                        .HasColumnName("rowguid");

                    b.HasKey("ProductID");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductModelID");

                    b.HasIndex("ProductSubcategoryID");

                    b.HasIndex("SizeUnitMeasureCode");

                    b.HasIndex("WeightUnitMeasureCode");

                    b.ToTable("Production.Product");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.ProductCategory", b =>
                {
                    b.Property<int>("ProductCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductCategoryID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductCategoryID"));

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Name");

                    b.Property<Guid>("rowguid")
                        .HasColumnType("uuid")
                        .HasColumnName("rowguid");

                    b.HasKey("ProductCategoryID");

                    b.ToTable("Production.ProductCategory");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.ProductCostHistory", b =>
                {
                    b.Property<int>("ProductID")
                        .HasColumnType("int")
                        .HasColumnName("ProductID")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("StartDate")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("EndDate");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<decimal>("StandardCost")
                        .HasColumnType("money")
                        .HasColumnName("StandardCost");

                    b.HasKey("ProductID", "StartDate");

                    b.ToTable("Production.ProductCostHistory");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.ProductDescription", b =>
                {
                    b.Property<int>("ProductDescriptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductDescriptionID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductDescriptionID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("Description");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<Guid>("rowguid")
                        .HasColumnType("uuid")
                        .HasColumnName("rowguid");

                    b.HasKey("ProductDescriptionID");

                    b.ToTable("Production.ProductDescription");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.ProductDocument", b =>
                {
                    b.Property<int>("ProductID")
                        .HasColumnType("int")
                        .HasColumnName("ProductID")
                        .HasColumnOrder(1);

                    b.Property<string>("DocumentNode")
                        .HasColumnType("text")
                        .HasColumnName("DocumentNode")
                        .HasColumnOrder(2);

                    b.Property<int>("DocumentBusinessEntityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.HasKey("ProductID", "DocumentNode");

                    b.HasIndex("DocumentBusinessEntityID");

                    b.ToTable("Production.ProductDocument");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.ProductInventory", b =>
                {
                    b.Property<int>("ProductID")
                        .HasColumnType("int")
                        .HasColumnName("ProductID")
                        .HasColumnOrder(1);

                    b.Property<short>("LocationID")
                        .HasColumnType("smallint")
                        .HasColumnName("LocationID")
                        .HasColumnOrder(2);

                    b.Property<byte>("Bin")
                        .HasColumnType("smallint")
                        .HasColumnName("Bin");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<short>("Quantity")
                        .HasColumnType("smallint")
                        .HasColumnName("Quantity");

                    b.Property<string>("Shelf")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("Shelf");

                    b.Property<Guid>("rowguid")
                        .HasColumnType("uuid")
                        .HasColumnName("rowguid");

                    b.HasKey("ProductID", "LocationID");

                    b.HasIndex("LocationID");

                    b.ToTable("Production.ProductInventory");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.ProductListPriceHistory", b =>
                {
                    b.Property<int>("ProductID")
                        .HasColumnType("int")
                        .HasColumnName("ProductID")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("StartDate")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("EndDate");

                    b.Property<decimal>("ListPrice")
                        .HasColumnType("money")
                        .HasColumnName("ListPrice");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.HasKey("ProductID", "StartDate");

                    b.ToTable("Production.ProductListPriceHistory");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.ProductModel", b =>
                {
                    b.Property<int>("ProductModelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductModelID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductModelID"));

                    b.Property<string>("CatalogDescription")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("CatalogDescription");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("Instructions");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Name");

                    b.Property<Guid>("rowguid")
                        .HasColumnType("uuid")
                        .HasColumnName("rowguid");

                    b.HasKey("ProductModelID");

                    b.ToTable("Production.ProductModel");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.ProductModelIllustration", b =>
                {
                    b.Property<int>("ProductModelID")
                        .HasColumnType("int")
                        .HasColumnName("ProductModelID")
                        .HasColumnOrder(1);

                    b.Property<int>("IllustrationID")
                        .HasColumnType("int")
                        .HasColumnName("IllustrationID")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.HasKey("ProductModelID", "IllustrationID");

                    b.HasIndex("IllustrationID");

                    b.ToTable("Production.ProductModelIllustration");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.ProductModelProductDescriptionCulture", b =>
                {
                    b.Property<int>("ProductModelID")
                        .HasColumnType("int")
                        .HasColumnName("ProductModelID")
                        .HasColumnOrder(1);

                    b.Property<int>("ProductDescriptionID")
                        .HasColumnType("int")
                        .HasColumnName("ProductDescriptionID")
                        .HasColumnOrder(2);

                    b.Property<string>("CultureID")
                        .HasMaxLength(6)
                        .HasColumnType("nchar")
                        .HasColumnName("CultureID")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.HasKey("ProductModelID", "ProductDescriptionID", "CultureID");

                    b.HasIndex("CultureID");

                    b.HasIndex("ProductDescriptionID");

                    b.ToTable("Production.ProductModelProductDescriptionCulture");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.ProductPhoto", b =>
                {
                    b.Property<int>("ProductPhotoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductPhotoID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductPhotoID"));

                    b.Property<byte[]>("LargePhoto")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("LargePhoto");

                    b.Property<string>("LargePhotoFileName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("LargePhotoFileName");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<byte[]>("ThumbNailPhoto")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("ThumbNailPhoto");

                    b.Property<string>("ThumbnailPhotoFileName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ThumbnailPhotoFileName");

                    b.HasKey("ProductPhotoID");

                    b.ToTable("Production.ProductPhoto");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.ProductProductPhoto", b =>
                {
                    b.Property<int>("ProductID")
                        .HasColumnType("int")
                        .HasColumnName("ProductID")
                        .HasColumnOrder(1);

                    b.Property<int>("ProductPhotoID")
                        .HasColumnType("int")
                        .HasColumnName("ProductPhotoID")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.HasKey("ProductID", "ProductPhotoID");

                    b.HasIndex("ProductPhotoID");

                    b.ToTable("Production.ProductProductPhoto");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.ProductReview", b =>
                {
                    b.Property<int>("ProductReviewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductReviewID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductReviewID"));

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(3850)
                        .HasColumnType("character varying(3850)")
                        .HasColumnName("Comments");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("EmailAddress");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<int>("ProductID")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("Rating");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ReviewDate");

                    b.Property<string>("ReviewerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ReviewerName");

                    b.HasKey("ProductReviewID");

                    b.HasIndex("ProductID");

                    b.ToTable("Production.ProductReview");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.ProductSubcategory", b =>
                {
                    b.Property<int>("ProductSubcategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductSubcategoryID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductSubcategoryID"));

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Name");

                    b.Property<int>("ProductCategoryID")
                        .HasColumnType("int")
                        .HasColumnName("ProductCategoryID");

                    b.Property<Guid>("rowguid")
                        .HasColumnType("uuid")
                        .HasColumnName("rowguid");

                    b.HasKey("ProductSubcategoryID");

                    b.HasIndex("ProductCategoryID");

                    b.ToTable("Production.ProductSubcategory");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.ProductVendor", b =>
                {
                    b.Property<int>("ProductID")
                        .HasColumnType("int")
                        .HasColumnName("ProductID")
                        .HasColumnOrder(1);

                    b.Property<int>("BusinessEntityID")
                        .HasColumnType("int")
                        .HasColumnName("BusinessEntityID")
                        .HasColumnOrder(2);

                    b.Property<int>("AverageLeadTime")
                        .HasColumnType("int")
                        .HasColumnName("AverageLeadTime");

                    b.Property<decimal?>("LastReceiptCost")
                        .HasColumnType("money")
                        .HasColumnName("LastReceiptCost");

                    b.Property<DateTime?>("LastReceiptDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("LastReceiptDate");

                    b.Property<int>("MaxOrderQty")
                        .HasColumnType("int")
                        .HasColumnName("MaxOrderQty");

                    b.Property<int>("MinOrderQty")
                        .HasColumnType("int")
                        .HasColumnName("MinOrderQty");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<int?>("OnOrderQty")
                        .HasColumnType("int")
                        .HasColumnName("OnOrderQty");

                    b.Property<decimal>("StandardPrice")
                        .HasColumnType("money")
                        .HasColumnName("StandardPrice");

                    b.Property<string>("UnitMeasureCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nchar")
                        .HasColumnName("UnitMeasureCode");

                    b.HasKey("ProductID", "BusinessEntityID");

                    b.HasIndex("BusinessEntityID");

                    b.HasIndex("UnitMeasureCode");

                    b.ToTable("Purchasing.ProductVendor");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.PurchaseOrderDetail", b =>
                {
                    b.Property<int>("ProductID")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int>("PurchaseOrderDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PurchaseOrderDetailID")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PurchaseOrderDetailID"));

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DueDate");

                    b.Property<decimal>("LineTotal")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("money")
                        .HasColumnName("LineTotal");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<short>("OrderQty")
                        .HasColumnType("smallint")
                        .HasColumnName("OrderQty");

                    b.Property<int>("PurchaseOrderID")
                        .HasColumnType("int")
                        .HasColumnName("PurchaseOrderID")
                        .HasColumnOrder(1);

                    b.Property<decimal>("ReceivedQty")
                        .HasColumnType("decimal")
                        .HasColumnName("ReceivedQty");

                    b.Property<decimal>("RejectedQty")
                        .HasColumnType("decimal")
                        .HasColumnName("RejectedQty");

                    b.Property<decimal>("StockedQty")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal")
                        .HasColumnName("StockedQty");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money")
                        .HasColumnName("UnitPrice");

                    b.HasKey("ProductID", "PurchaseOrderDetailID");

                    b.HasIndex("PurchaseOrderID");

                    b.ToTable("Purchasing.PurchaseOrderDetail");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.PurchaseOrderHeader", b =>
                {
                    b.Property<int>("PurchaseOrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PurchaseOrderID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PurchaseOrderID"));

                    b.Property<int>("BusinessEntityID")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<decimal>("Freight")
                        .HasColumnType("money")
                        .HasColumnName("Freight");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OrderDate");

                    b.Property<byte>("RevisionNumber")
                        .HasColumnType("smallint")
                        .HasColumnName("RevisionNumber");

                    b.Property<DateTime?>("ShipDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ShipDate");

                    b.Property<int>("ShipMethodID")
                        .HasColumnType("int")
                        .HasColumnName("ShipMethodID");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("Status");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("money")
                        .HasColumnName("SubTotal");

                    b.Property<decimal>("TaxAmt")
                        .HasColumnType("money")
                        .HasColumnName("TaxAmt");

                    b.Property<decimal>("TotalDue")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("money")
                        .HasColumnName("TotalDue");

                    b.Property<int>("VendorID")
                        .HasColumnType("int")
                        .HasColumnName("VendorID");

                    b.HasKey("PurchaseOrderID");

                    b.HasIndex("BusinessEntityID");

                    b.HasIndex("ShipMethodID");

                    b.ToTable("Purchasing.PurchaseOrderHeader");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.SalesOrderDetail", b =>
                {
                    b.Property<int>("SalesOrderID")
                        .HasColumnType("int")
                        .HasColumnName("SalesOrderID")
                        .HasColumnOrder(1);

                    b.Property<int>("SalesOrderDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SalesOrderDetailID")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SalesOrderDetailID"));

                    b.Property<string>("CarrierTrackingNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("CarrierTrackingNumber");

                    b.Property<decimal>("LineTotal")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("numeric")
                        .HasColumnName("LineTotal");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<short>("OrderQty")
                        .HasColumnType("smallint")
                        .HasColumnName("OrderQty");

                    b.Property<int>("ProductID")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int>("SpecialOfferID")
                        .HasColumnType("int")
                        .HasColumnName("SpecialOfferID");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money")
                        .HasColumnName("UnitPrice");

                    b.Property<decimal>("UnitPriceDiscount")
                        .HasColumnType("money")
                        .HasColumnName("UnitPriceDiscount");

                    b.Property<Guid>("rowguid")
                        .HasColumnType("uuid")
                        .HasColumnName("rowguid");

                    b.HasKey("SalesOrderID", "SalesOrderDetailID");

                    b.HasIndex("SpecialOfferID", "ProductID");

                    b.ToTable("Sales.SalesOrderDetail");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.SalesOrderHeader", b =>
                {
                    b.Property<int>("SalesOrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SalesOrderID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SalesOrderID"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("AccountNumber");

                    b.Property<int>("BillToAddressID")
                        .HasColumnType("int")
                        .HasColumnName("BillToAddressID");

                    b.Property<int>("BusinessEntityID")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("Comment");

                    b.Property<string>("CreditCardApprovalCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar")
                        .HasColumnName("CreditCardApprovalCode");

                    b.Property<int?>("CreditCardID")
                        .HasColumnType("int")
                        .HasColumnName("CreditCardID");

                    b.Property<int?>("CurrencyRateID")
                        .HasColumnType("int")
                        .HasColumnName("CurrencyRateID");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DueDate");

                    b.Property<decimal>("Freight")
                        .HasColumnType("money")
                        .HasColumnName("Freight");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OrderDate");

                    b.Property<string>("PurchaseOrderNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("PurchaseOrderNumber");

                    b.Property<byte>("RevisionNumber")
                        .HasColumnType("smallint")
                        .HasColumnName("RevisionNumber");

                    b.Property<string>("SalesOrderNumber")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("SalesOrderNumber");

                    b.Property<int?>("SalesPersonID")
                        .HasColumnType("int")
                        .HasColumnName("SalesPersonID");

                    b.Property<DateTime?>("ShipDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ShipDate");

                    b.Property<int>("ShipMethodID")
                        .HasColumnType("int")
                        .HasColumnName("ShipMethodID");

                    b.Property<int>("ShipToAddressID")
                        .HasColumnType("int")
                        .HasColumnName("ShipToAddressID");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("Status");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("money")
                        .HasColumnName("SubTotal");

                    b.Property<decimal>("TaxAmt")
                        .HasColumnType("money")
                        .HasColumnName("TaxAmt");

                    b.Property<int?>("TerritoryID")
                        .HasColumnType("int")
                        .HasColumnName("TerritoryID");

                    b.Property<decimal>("TotalDue")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("money")
                        .HasColumnName("TotalDue");

                    b.Property<Guid>("rowguid")
                        .HasColumnType("uuid")
                        .HasColumnName("rowguid");

                    b.HasKey("SalesOrderID");

                    b.HasIndex("BillToAddressID");

                    b.HasIndex("BusinessEntityID");

                    b.HasIndex("CreditCardID");

                    b.HasIndex("CurrencyRateID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("ShipMethodID");

                    b.HasIndex("ShipToAddressID");

                    b.HasIndex("TerritoryID");

                    b.ToTable("Sales.SalesOrderHeader");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.SalesOrderHeaderSalesReason", b =>
                {
                    b.Property<int>("SalesOrderID")
                        .HasColumnType("int")
                        .HasColumnName("SalesOrderID")
                        .HasColumnOrder(1);

                    b.Property<int>("SalesReasonID")
                        .HasColumnType("int")
                        .HasColumnName("SalesReasonID")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.HasKey("SalesOrderID", "SalesReasonID");

                    b.HasIndex("SalesReasonID");

                    b.ToTable("Sales.SalesOrderHeaderSalesReason");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.SalesPerson", b =>
                {
                    b.Property<int>("BusinessEntityID")
                        .HasColumnType("int")
                        .HasColumnName("BusinessEntityID");

                    b.Property<decimal>("Bonus")
                        .HasColumnType("money")
                        .HasColumnName("Bonus");

                    b.Property<decimal>("CommissionPct")
                        .HasColumnType("numeric")
                        .HasColumnName("CommissionPct");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<decimal>("SalesLastYear")
                        .HasColumnType("money")
                        .HasColumnName("SalesLastYear");

                    b.Property<decimal?>("SalesQuota")
                        .HasColumnType("money")
                        .HasColumnName("SalesQuota");

                    b.Property<decimal>("SalesYTD")
                        .HasColumnType("money")
                        .HasColumnName("SalesYTD");

                    b.Property<int?>("TerritoryID")
                        .HasColumnType("int")
                        .HasColumnName("TerritoryID");

                    b.Property<Guid>("rowguid")
                        .HasColumnType("uuid")
                        .HasColumnName("rowguid");

                    b.HasKey("BusinessEntityID");

                    b.HasIndex("TerritoryID");

                    b.ToTable("Sales.SalesPerson");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.SalesPersonQuotaHistory", b =>
                {
                    b.Property<int>("BusinessEntityID")
                        .HasColumnType("int")
                        .HasColumnName("BusinessEntityID")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("QuotaDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("QuotaDate")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<decimal>("SalesQuota")
                        .HasColumnType("money")
                        .HasColumnName("SalesQuota");

                    b.Property<Guid>("rowguid")
                        .HasColumnType("uuid")
                        .HasColumnName("rowguid");

                    b.HasKey("BusinessEntityID", "QuotaDate");

                    b.ToTable("Sales.SalesPersonQuotaHistory");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.SalesReason", b =>
                {
                    b.Property<int>("SalesReasonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SalesReasonID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SalesReasonID"));

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Name");

                    b.Property<string>("ReasonType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ReasonType");

                    b.HasKey("SalesReasonID");

                    b.ToTable("Sales.SalesReason");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.SalesTaxRate", b =>
                {
                    b.Property<int>("SalesTaxRateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SalesTaxRateID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SalesTaxRateID"));

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Name");

                    b.Property<int>("StateProvinceID")
                        .HasColumnType("int")
                        .HasColumnName("StateProvinceID");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("numeric")
                        .HasColumnName("TaxRate");

                    b.Property<byte>("TaxType")
                        .HasColumnType("smallint")
                        .HasColumnName("TaxType");

                    b.Property<Guid>("rowguid")
                        .HasColumnType("uuid")
                        .HasColumnName("rowguid");

                    b.HasKey("SalesTaxRateID");

                    b.HasIndex("StateProvinceID");

                    b.ToTable("Sales.SalesTaxRate", "Sales");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.SalesTerritory", b =>
                {
                    b.Property<int>("TerritoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TerritoryID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TerritoryID"));

                    b.Property<decimal>("CostLastYear")
                        .HasColumnType("money")
                        .HasColumnName("CostLastYear");

                    b.Property<decimal>("CostYTD")
                        .HasColumnType("money")
                        .HasColumnName("CostYTD");

                    b.Property<string>("CountryRegionCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("CountryRegionCode");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Group");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Name");

                    b.Property<decimal>("SalesLastYear")
                        .HasColumnType("money")
                        .HasColumnName("SalesLastYear");

                    b.Property<decimal>("SalesYTD")
                        .HasColumnType("money")
                        .HasColumnName("SalesYTD");

                    b.Property<Guid>("rowguid")
                        .HasColumnType("uuid")
                        .HasColumnName("rowguid");

                    b.HasKey("TerritoryID");

                    b.HasIndex("CountryRegionCode");

                    b.ToTable("Sales.SalesTerritory", "Sales");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.SalesTerritoryHistory", b =>
                {
                    b.Property<int>("BusinessEntityID")
                        .HasColumnType("int")
                        .HasColumnName("BusinessEntityID")
                        .HasColumnOrder(1);

                    b.Property<int>("TerritoryID")
                        .HasColumnType("int")
                        .HasColumnName("TerritoryID")
                        .HasColumnOrder(3);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("EndDate");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("StartDate")
                        .HasColumnOrder(2);

                    b.Property<Guid>("rowguid")
                        .HasColumnType("uuid")
                        .HasColumnName("rowguid");

                    b.HasKey("BusinessEntityID", "TerritoryID");

                    b.HasIndex("TerritoryID");

                    b.ToTable("Sales.SalesTerritoryHistory", "Sales");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.ScrapReason", b =>
                {
                    b.Property<short>("ScrapReasonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("ScrapReasonID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("ScrapReasonID"));

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Name");

                    b.HasKey("ScrapReasonID");

                    b.ToTable("Production.ScrapReason", "Production");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Shared.Basket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<bool>("IsCheckedOut")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Basket", "Shared");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Shared.BasketItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BasketId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProductName")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BasketId");

                    b.ToTable("BasketItem", "Shared");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Shared.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("Picture")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Shared.ChatRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReferenceDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ChatRequests");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Shared.CompetitionMatch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("LeagueCode")
                        .HasColumnType("uuid");

                    b.Property<string>("PlayerTwo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CompetitionMatches");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Shared.Coupon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Shared.EmployeeAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeAddresses");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Shared.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FeatureName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Feature", "Shared");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Shared.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Shared.UserProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("Company")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("IsLoggedIn")
                        .HasColumnType("text");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<int>("LoginCount")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nickname")
                        .HasColumnType("text");

                    b.Property<int>("NotificationSettingsId")
                        .HasColumnType("integer");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<int>("PrivacySettingsId")
                        .HasColumnType("integer");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Subscription")
                        .HasColumnType("text");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserTypeId")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Website")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingsId");

                    b.HasIndex("PrivacySettingsId");

                    b.HasIndex("UserId");

                    b.ToTable("UserProfile", "Shared");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Shift", b =>
                {
                    b.Property<int>("ShiftID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ShiftID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ShiftID"));

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time")
                        .HasColumnName("EndTime");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Name");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time")
                        .HasColumnName("StartTime");

                    b.HasKey("ShiftID");

                    b.ToTable("Shift", "HumanResources");

                    b.HasData(
                        new
                        {
                            ShiftID = 1,
                            EndTime = new TimeSpan(0, 15, 0, 0, 0),
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Day",
                            StartTime = new TimeSpan(0, 7, 0, 0, 0)
                        },
                        new
                        {
                            ShiftID = 2,
                            EndTime = new TimeSpan(0, 23, 0, 0, 0),
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Evening",
                            StartTime = new TimeSpan(0, 15, 0, 0, 0)
                        },
                        new
                        {
                            ShiftID = 3,
                            EndTime = new TimeSpan(0, 7, 0, 0, 0),
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Night",
                            StartTime = new TimeSpan(0, 23, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.ShipMethod", b =>
                {
                    b.Property<int>("ShipMethodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ShipMethodID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ShipMethodID"));

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Name");

                    b.Property<decimal>("ShipBase")
                        .HasColumnType("money")
                        .HasColumnName("ShipBase");

                    b.Property<decimal>("ShipRate")
                        .HasColumnType("money")
                        .HasColumnName("ShipRate");

                    b.Property<Guid>("rowguid")
                        .HasColumnType("uuid")
                        .HasColumnName("rowguid");

                    b.HasKey("ShipMethodID");

                    b.ToTable("Purchasing.ShipMethod", "Purchasing");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.ShoppingCartItem", b =>
                {
                    b.Property<int>("ShoppingCartItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ShoppingCartItemID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ShoppingCartItemID"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateCreated");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<int>("ProductID")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("Quantity");

                    b.Property<string>("ShoppingCartID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ShoppingCartID");

                    b.HasKey("ShoppingCartItemID");

                    b.HasIndex("ProductID");

                    b.ToTable("Sales.ShoppingCartItem", "Sales");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.SpecialOffer", b =>
                {
                    b.Property<int>("SpecialOfferID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SpecialOfferID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SpecialOfferID"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Category");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Description");

                    b.Property<decimal>("DiscountPct")
                        .HasColumnType("numeric")
                        .HasColumnName("DiscountPct");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("EndDate");

                    b.Property<int?>("MaxQty")
                        .HasColumnType("int")
                        .HasColumnName("MaxQty");

                    b.Property<int>("MinQty")
                        .HasColumnType("int")
                        .HasColumnName("MinQty");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("StartDate");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Type");

                    b.Property<Guid>("rowguid")
                        .HasColumnType("uuid")
                        .HasColumnName("rowguid");

                    b.HasKey("SpecialOfferID");

                    b.ToTable("Sales.SpecialOffer", "Sales");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.SpecialOfferProduct", b =>
                {
                    b.Property<int>("SpecialOfferID")
                        .HasColumnType("int")
                        .HasColumnName("SpecialOfferID")
                        .HasColumnOrder(1);

                    b.Property<int>("ProductID")
                        .HasColumnType("int")
                        .HasColumnName("ProductID")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<Guid>("rowguid")
                        .HasColumnType("uuid")
                        .HasColumnName("rowguid");

                    b.HasKey("SpecialOfferID", "ProductID");

                    b.HasIndex("ProductID");

                    b.ToTable("Person.SpecialOfferProduct", "Person");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.StateProvince", b =>
                {
                    b.Property<int>("StateProvinceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StateProvinceID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StateProvinceID"));

                    b.Property<string>("CountryRegionCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("CountryRegionCode");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Name");

                    b.Property<string>("StateProvinceCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nchar")
                        .HasColumnName("StateProvinceCode");

                    b.Property<int>("TerritoryID")
                        .HasColumnType("int")
                        .HasColumnName("TerritoryID");

                    b.Property<Guid>("rowguid")
                        .HasColumnType("uuid")
                        .HasColumnName("rowguid");

                    b.HasKey("StateProvinceID");

                    b.HasIndex("CountryRegionCode");

                    b.HasIndex("TerritoryID");

                    b.ToTable("Person.StateProvince", "Person");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Store", b =>
                {
                    b.Property<int>("BusinessEntityID")
                        .HasColumnType("int")
                        .HasColumnName("BusinessEntityID");

                    b.Property<string>("Demographics")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("Demographics");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Name");

                    b.Property<int?>("SalesPersonID")
                        .HasColumnType("int")
                        .HasColumnName("SalesPersonID");

                    b.Property<Guid>("rowguid")
                        .HasColumnType("uuid")
                        .HasColumnName("rowguid");

                    b.HasKey("BusinessEntityID");

                    b.ToTable("Store", (string)null);
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.StoreContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("StoreContacts");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.TradingEconomics.ComtradeCategories", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ParentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PrettyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ComtradeCategories", "TradingEconomics");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.TradingEconomics.Forecast", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ForecastLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("ForecastValue1")
                        .HasColumnType("double precision");

                    b.Property<double?>("ForecastValue1Q")
                        .HasColumnType("double precision");

                    b.Property<double?>("ForecastValue2")
                        .HasColumnType("double precision");

                    b.Property<double?>("ForecastValue2Q")
                        .HasColumnType("double precision");

                    b.Property<double?>("ForecastValue3")
                        .HasColumnType("double precision");

                    b.Property<double?>("ForecastValue3Q")
                        .HasColumnType("double precision");

                    b.Property<double?>("ForecastValue4Q")
                        .HasColumnType("double precision");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HistoricalDataSymbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("LatestValue")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("LatestValueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Q1Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Q2Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Q3Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Q4Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Forecast", "TradingEconomics");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.TradingEconomics.TradingEconomicsCalendar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Actual")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CalendarId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DateSpan")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Forecast")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Importance")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Previous")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReferenceDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Revised")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TeForecast")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TradingEconomicsCalendar", "TradingEconomics");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.TransactionHistory", b =>
                {
                    b.Property<int>("TransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TransactionID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TransactionID"));

                    b.Property<decimal>("ActualCost")
                        .HasColumnType("money")
                        .HasColumnName("ActualCost");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<int>("ProductID")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("Quantity");

                    b.Property<int>("ReferenceOrderID")
                        .HasColumnType("int")
                        .HasColumnName("ReferenceOrderID");

                    b.Property<int>("ReferenceOrderLineID")
                        .HasColumnType("int")
                        .HasColumnName("ReferenceOrderLineID");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("TransactionDate");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nchar")
                        .HasColumnName("TransactionType");

                    b.HasKey("TransactionID");

                    b.HasIndex("ProductID");

                    b.ToTable("Production.TransactionHistory", "Production");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.TransactionHistoryArchive", b =>
                {
                    b.Property<int>("TransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TransactionID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TransactionID"));

                    b.Property<decimal>("ActualCost")
                        .HasColumnType("money")
                        .HasColumnName("ActualCost");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<int>("ProductID")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("Quantity");

                    b.Property<int>("ReferenceOrderID")
                        .HasColumnType("int")
                        .HasColumnName("ReferenceOrderID");

                    b.Property<int>("ReferenceOrderLineID")
                        .HasColumnType("int")
                        .HasColumnName("ReferenceOrderLineID");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("TransactionDate");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nchar")
                        .HasColumnName("TransactionType");

                    b.HasKey("TransactionID");

                    b.ToTable("Production.TransactionHistoryArchive", "Production");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.UnitMeasure", b =>
                {
                    b.Property<string>("UnitMeasureCode")
                        .HasMaxLength(3)
                        .HasColumnType("nchar")
                        .HasColumnName("UnitMeasureCode");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Name");

                    b.HasKey("UnitMeasureCode");

                    b.ToTable("Production.UnitMeasure", "Production");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Vendor", b =>
                {
                    b.Property<int>("BusinessEntityID")
                        .HasColumnType("int")
                        .HasColumnName("BusinessEntityID");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("AccountNumber");

                    b.Property<byte>("CreditRating")
                        .HasColumnType("smallint")
                        .HasColumnName("CreditRating");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Name");

                    b.Property<string>("PurchasingWebServiceURL")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("PurchasingWebServiceURL");

                    b.HasKey("BusinessEntityID");

                    b.ToTable("Vendor", (string)null);
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.VendorAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("VendorAddresses");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.VendorContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("VendorContacts");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.WorkOrder", b =>
                {
                    b.Property<int>("WorkOrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WorkOrderID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WorkOrderID"));

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DueDate");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("EndDate");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<int>("OrderQty")
                        .HasColumnType("int")
                        .HasColumnName("OrderQty");

                    b.Property<int>("ProductID")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<short?>("ScrapReasonID")
                        .HasColumnType("smallint")
                        .HasColumnName("ScrapReasonID");

                    b.Property<short>("ScrappedQty")
                        .HasColumnType("smallint")
                        .HasColumnName("ScrappedQty");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("StartDate");

                    b.Property<int>("StockedQty")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasColumnName("StockedQty");

                    b.HasKey("WorkOrderID");

                    b.HasIndex("ProductID");

                    b.HasIndex("ScrapReasonID");

                    b.ToTable("Production.WorkOrder", "Production");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.WorkOrderRouting", b =>
                {
                    b.Property<int>("WorkOrderID")
                        .HasColumnType("int")
                        .HasColumnName("WorkOrderID")
                        .HasColumnOrder(1);

                    b.Property<int>("ProductID")
                        .HasColumnType("int")
                        .HasColumnName("ProductID")
                        .HasColumnOrder(2);

                    b.Property<decimal?>("ActualCost")
                        .HasColumnType("money")
                        .HasColumnName("ActualCost");

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ActualEndDate");

                    b.Property<decimal?>("ActualResourceHrs")
                        .HasColumnType("decimal")
                        .HasColumnName("ActualResourceHrs");

                    b.Property<DateTime?>("ActualStartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ActualStartDate");

                    b.Property<short>("LocationID")
                        .HasColumnType("smallint")
                        .HasColumnName("LocationID");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDate");

                    b.Property<short?>("OperationSequence")
                        .HasColumnType("smallint")
                        .HasColumnName("OperationSequence")
                        .HasColumnOrder(3);

                    b.Property<decimal>("PlannedCost")
                        .HasColumnType("money")
                        .HasColumnName("PlannedCost");

                    b.Property<DateTime>("ScheduledEndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ScheduledEndDate");

                    b.Property<DateTime>("ScheduledStartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ScheduledStartDate");

                    b.HasKey("WorkOrderID", "ProductID");

                    b.HasIndex("LocationID");

                    b.ToTable("Production.WorkOrderRouting", "Production");
                });

            modelBuilder.Entity("Orion.Domain.DTO.NotificationSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Email")
                        .HasColumnType("boolean");

                    b.Property<bool>("Marketing")
                        .HasColumnType("boolean");

                    b.Property<bool>("Push")
                        .HasColumnType("boolean");

                    b.Property<bool>("Sms")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("NotificationSettings");
                });

            modelBuilder.Entity("Orion.Domain.DTO.PrivacySettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("ProfileVisible")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowEmail")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowPhone")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("PrivacySettings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Address", b =>
                {
                    b.HasOne("Orion.DataAccess.Postgres.Entities.StateProvince", "StateProvince")
                        .WithMany("Addresses")
                        .HasForeignKey("StateProvinceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StateProvince");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.BillOfMaterials", b =>
                {
                    b.HasOne("Orion.DataAccess.Postgres.Entities.Product", "Product1")
                        .WithMany("BillOfMaterials1")
                        .HasForeignKey("ComponentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orion.DataAccess.Postgres.Entities.Product", "Product")
                        .WithMany("BillOfMaterials")
                        .HasForeignKey("ProductAssemblyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orion.DataAccess.Postgres.Entities.UnitMeasure", "UnitMeasure")
                        .WithMany("BillOfMaterials")
                        .HasForeignKey("UnitMeasureCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Product1");

                    b.Navigation("UnitMeasure");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.BusinessEntityAddress", b =>
                {
                    b.HasOne("Orion.DataAccess.Postgres.Entities.Address", "Address")
                        .WithMany("BusinessEntityAddress")
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orion.DataAccess.Postgres.Entities.AddressType", "AddressType")
                        .WithMany("BusinessEntityAddress")
                        .HasForeignKey("AddressTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orion.DataAccess.Postgres.Entities.BusinessEntity", "BusinessEntity")
                        .WithMany("BusinessEntityAddress")
                        .HasForeignKey("BusinessEntityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("AddressType");

                    b.Navigation("BusinessEntity");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.BusinessEntityContact", b =>
                {
                    b.HasOne("Orion.DataAccess.Postgres.Entities.BusinessEntity", "BusinessEntity")
                        .WithMany("BusinessEntityContact")
                        .HasForeignKey("BusinessEntityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orion.DataAccess.Postgres.Entities.Person", "Person")
                        .WithMany("BusinessEntityContact")
                        .HasForeignKey("BusinessEntityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orion.DataAccess.Postgres.Entities.ContactType", "ContactType")
                        .WithMany("BusinessEntityContact")
                        .HasForeignKey("ContactTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessEntity");

                    b.Navigation("ContactType");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.CountryRegionCurrency", b =>
                {
                    b.HasOne("Orion.DataAccess.Postgres.Entities.CountryRegion", "CountryRegion")
                        .WithMany("CountryRegionCurrencies")
                        .HasForeignKey("CountryRegionCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orion.DataAccess.Postgres.Entities.Currency", "Currency")
                        .WithMany("CountryRegionCurrencies")
                        .HasForeignKey("CurrencyCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CountryRegion");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Course", b =>
                {
                    b.HasOne("Orion.DataAccess.Postgres.Entities.Employee", null)
                        .WithMany("AttendedCourses")
                        .HasForeignKey("EmployeeBusinessEntityID");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.CurrencyRate", b =>
                {
                    b.HasOne("Orion.DataAccess.Postgres.Entities.Currency", "Currency")
                        .WithMany("CurrencyRates")
                        .HasForeignKey("FromCurrencyCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orion.DataAccess.Postgres.Entities.Currency", "Currency1")
                        .WithMany("CurrencyRates1")
                        .HasForeignKey("ToCurrencyCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Currency1");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Customer", b =>
                {
                    b.HasOne("Orion.DataAccess.Postgres.Entities.Person", "Person")
                        .WithMany("Customers")
                        .HasForeignKey("BusinessEntityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orion.DataAccess.Postgres.Entities.Store", "Store")
                        .WithMany("Customers")
                        .HasForeignKey("BusinessEntityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orion.DataAccess.Postgres.Entities.SalesTerritory", "SalesTerritory")
                        .WithMany("Customers")
                        .HasForeignKey("TerritoryID");

                    b.Navigation("Person");

                    b.Navigation("SalesTerritory");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Document", b =>
                {
                    b.HasOne("Orion.DataAccess.Postgres.Entities.Employee", "Employee")
                        .WithMany("Documents")
                        .HasForeignKey("BusinessEntityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.EmailAddress", b =>
                {
                    b.HasOne("Orion.DataAccess.Postgres.Entities.Person", "Person")
                        .WithMany("EmailAddresses")
                        .HasForeignKey("BusinessEntityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.EmployeeDepartmentHistory", b =>
                {
                    b.HasOne("Orion.DataAccess.Postgres.Entities.Employee", "Employee")
                        .WithMany("EmployeeDepartmentHistories")
                        .HasForeignKey("BusinessEntityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orion.DataAccess.Postgres.Entities.Department", "Department")
                        .WithMany("EmployeeDepartmentHistories")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orion.DataAccess.Postgres.Entities.Shift", "Shift")
                        .WithMany("EmployeeDepartmentHistories")
                        .HasForeignKey("ShiftID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Employee");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.EmployeePayHistory", b =>
                {
                    b.HasOne("Orion.DataAccess.Postgres.Entities.Employee", "Employee")
                        .WithMany("EmployeePayHistories")
                        .HasForeignKey("BusinessEntityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.JobCandidate", b =>
                {
                    b.HasOne("Orion.DataAccess.Postgres.Entities.Employee", "Employee")
                        .WithMany("JobCandidates")
                        .HasForeignKey("BusinessEntityID");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Password", b =>
                {
                    b.HasOne("Orion.DataAccess.Postgres.Entities.Person", "Person")
                        .WithOne("Password")
                        .HasForeignKey("Orion.DataAccess.Postgres.Entities.Password", "BusinessEntityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Person", b =>
                {
                    b.HasOne("Orion.DataAccess.Postgres.Entities.BusinessEntity", "BusinessEntity")
                        .WithMany()
                        .HasForeignKey("BusinessEntityID1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orion.DataAccess.Postgres.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeBusinessEntityID");

                    b.Navigation("BusinessEntity");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.PersonCreditCard", b =>
                {
                    b.HasOne("Orion.DataAccess.Postgres.Entities.Person", "Person")
                        .WithMany("PersonCreditCards")
                        .HasForeignKey("BusinessEntityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orion.DataAccess.Postgres.Entities.CreditCard", "CreditCard")
                        .WithMany("PersonCreditCards")
                        .HasForeignKey("CreditCardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreditCard");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.PersonPhone", b =>
                {
                    b.HasOne("Orion.DataAccess.Postgres.Entities.Person", "Person")
                        .WithMany("PersonPhones")
                        .HasForeignKey("BusinessEntityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orion.DataAccess.Postgres.Entities.PhoneNumberType", "PhoneNumberType")
                        .WithMany("PersonPhones")
                        .HasForeignKey("PhoneNumberTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("PhoneNumberType");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Product", b =>
                {
                    b.HasOne("Orion.DataAccess.Postgres.Entities.Shared.Category", null)
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Orion.DataAccess.Postgres.Entities.ProductModel", "ProductModel")
                        .WithMany("Products")
                        .HasForeignKey("ProductModelID");

                    b.HasOne("Orion.DataAccess.Postgres.Entities.ProductSubcategory", "ProductSubcategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductSubcategoryID");

                    b.HasOne("Orion.DataAccess.Postgres.Entities.UnitMeasure", "UnitMeasure")
                        .WithMany("Products")
                        .HasForeignKey("SizeUnitMeasureCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orion.DataAccess.Postgres.Entities.UnitMeasure", "UnitMeasure1")
                        .WithMany("Products1")
                        .HasForeignKey("WeightUnitMeasureCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductModel");

                    b.Navigation("ProductSubcategory");

                    b.Navigation("UnitMeasure");

                    b.Navigation("UnitMeasure1");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.ProductCostHistory", b =>
                {
                    b.HasOne("Orion.DataAccess.Postgres.Entities.Product", "Product")
                        .WithMany("ProductCostHistories")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.ProductDocument", b =>
                {
                    b.HasOne("Orion.DataAccess.Postgres.Entities.Document", "Document")
                        .WithMany("ProductDocuments")
                        .HasForeignKey("DocumentBusinessEntityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orion.DataAccess.Postgres.Entities.Product", "Product")
                        .WithMany("ProductDocuments")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.ProductInventory", b =>
                {
                    b.HasOne("Orion.DataAccess.Postgres.Entities.Location", "Location")
                        .WithMany("ProductInventories")
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orion.DataAccess.Postgres.Entities.Product", "Product")
                        .WithMany("ProductInventories")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.ProductListPriceHistory", b =>
                {
                    b.HasOne("Orion.DataAccess.Postgres.Entities.Product", "Product")
                        .WithMany("ProductListPriceHistories")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.ProductModelIllustration", b =>
                {
                    b.HasOne("Orion.DataAccess.Postgres.Entities.Illustration", "Illustration")
                        .WithMany("ProductModelIllustrations")
                        .HasForeignKey("IllustrationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orion.DataAccess.Postgres.Entities.ProductModel", "ProductModel")
                        .WithMany("ProductModelIllustrations")
                        .HasForeignKey("ProductModelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Illustration");

                    b.Navigation("ProductModel");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.ProductModelProductDescriptionCulture", b =>
                {
                    b.HasOne("Orion.DataAccess.Postgres.Entities.Culture", "Culture")
                        .WithMany("ProductModelProductDescriptionCultures")
                        .HasForeignKey("CultureID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orion.DataAccess.Postgres.Entities.ProductDescription", "ProductDescription")
                        .WithMany("ProductModelProductDescriptionCultures")
                        .HasForeignKey("ProductDescriptionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Production.ProductModelProductDescriptionCulture_Productio~1");

                    b.HasOne("Orion.DataAccess.Postgres.Entities.ProductModel", "ProductModel")
                        .WithMany("ProductModelProductDescriptionCultures")
                        .HasForeignKey("ProductModelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Production.ProductModelProductDescriptionCulture_Productio~2");

                    b.Navigation("Culture");

                    b.Navigation("ProductDescription");

                    b.Navigation("ProductModel");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.ProductProductPhoto", b =>
                {
                    b.HasOne("Orion.DataAccess.Postgres.Entities.Product", "Product")
                        .WithMany("ProductProductPhotos")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orion.DataAccess.Postgres.Entities.ProductPhoto", "ProductPhoto")
                        .WithMany("ProductProductPhotos")
                        .HasForeignKey("ProductPhotoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductPhoto");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.ProductReview", b =>
                {
                    b.HasOne("Orion.DataAccess.Postgres.Entities.Product", "Product")
                        .WithMany("ProductReviews")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.ProductSubcategory", b =>
                {
                    b.HasOne("Orion.DataAccess.Postgres.Entities.ProductCategory", "ProductCategory")
                        .WithMany("ProductSubcategories")
                        .HasForeignKey("ProductCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.ProductVendor", b =>
                {
                    b.HasOne("Orion.DataAccess.Postgres.Entities.Vendor", "Vendor")
                        .WithMany("ProductVendors")
                        .HasForeignKey("BusinessEntityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orion.DataAccess.Postgres.Entities.Product", "Product")
                        .WithMany("ProductVendors")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orion.DataAccess.Postgres.Entities.UnitMeasure", "UnitMeasure")
                        .WithMany("ProductVendors")
                        .HasForeignKey("UnitMeasureCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("UnitMeasure");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.PurchaseOrderDetail", b =>
                {
                    b.HasOne("Orion.DataAccess.Postgres.Entities.Product", "Product")
                        .WithMany("PurchaseOrderDetails")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orion.DataAccess.Postgres.Entities.PurchaseOrderHeader", "PurchaseOrderHeader")
                        .WithMany("PurchaseOrderDetails")
                        .HasForeignKey("PurchaseOrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("PurchaseOrderHeader");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.PurchaseOrderHeader", b =>
                {
                    b.HasOne("Orion.DataAccess.Postgres.Entities.Employee", "Employee")
                        .WithMany("PurchaseOrderHeaders")
                        .HasForeignKey("BusinessEntityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orion.DataAccess.Postgres.Entities.Vendor", "Vendor")
                        .WithMany("PurchaseOrderHeaders")
                        .HasForeignKey("BusinessEntityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orion.DataAccess.Postgres.Entities.ShipMethod", "ShippedBy")
                        .WithMany("PurchaseOrderHeaders")
                        .HasForeignKey("ShipMethodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("ShippedBy");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.SalesOrderDetail", b =>
                {
                    b.HasOne("Orion.DataAccess.Postgres.Entities.SalesOrderHeader", "SalesOrderHeader")
                        .WithMany("SalesOrderDetails")
                        .HasForeignKey("SalesOrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orion.DataAccess.Postgres.Entities.SpecialOfferProduct", "SpecialOfferProduct")
                        .WithMany("SalesOrderDetails")
                        .HasForeignKey("SpecialOfferID", "ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SalesOrderHeader");

                    b.Navigation("SpecialOfferProduct");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.SalesOrderHeader", b =>
                {
                    b.HasOne("Orion.DataAccess.Postgres.Entities.Address", "Address")
                        .WithMany("SalesOrderHeaders")
                        .HasForeignKey("BillToAddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orion.DataAccess.Postgres.Entities.SalesPerson", "SalesPerson")
                        .WithMany("SalesOrderHeaders")
                        .HasForeignKey("BusinessEntityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orion.DataAccess.Postgres.Entities.CreditCard", "CreditCard")
                        .WithMany("SalesOrderHeaders")
                        .HasForeignKey("CreditCardID");

                    b.HasOne("Orion.DataAccess.Postgres.Entities.CurrencyRate", "CurrencyRate")
                        .WithMany("SalesOrderHeaders")
                        .HasForeignKey("CurrencyRateID");

                    b.HasOne("Orion.DataAccess.Postgres.Entities.Customer", "Customer")
                        .WithMany("SalesOrderHeaders")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orion.DataAccess.Postgres.Entities.ShipMethod", "ShippedBy")
                        .WithMany("SalesOrderHeaders")
                        .HasForeignKey("ShipMethodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orion.DataAccess.Postgres.Entities.Address", "Address1")
                        .WithMany("SalesOrderHeaders1")
                        .HasForeignKey("ShipToAddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orion.DataAccess.Postgres.Entities.SalesTerritory", "SalesTerritory")
                        .WithMany("SalesOrderHeaders")
                        .HasForeignKey("TerritoryID");

                    b.Navigation("Address");

                    b.Navigation("Address1");

                    b.Navigation("CreditCard");

                    b.Navigation("CurrencyRate");

                    b.Navigation("Customer");

                    b.Navigation("SalesPerson");

                    b.Navigation("SalesTerritory");

                    b.Navigation("ShippedBy");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.SalesOrderHeaderSalesReason", b =>
                {
                    b.HasOne("Orion.DataAccess.Postgres.Entities.SalesOrderHeader", "SalesOrderHeader")
                        .WithMany("SalesOrderHeaderSalesReasons")
                        .HasForeignKey("SalesOrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orion.DataAccess.Postgres.Entities.SalesReason", "SalesReason")
                        .WithMany("SalesOrderHeaderSalesReasons")
                        .HasForeignKey("SalesReasonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SalesOrderHeader");

                    b.Navigation("SalesReason");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.SalesPerson", b =>
                {
                    b.HasOne("Orion.DataAccess.Postgres.Entities.Employee", "Employee")
                        .WithOne("SalesPerson")
                        .HasForeignKey("Orion.DataAccess.Postgres.Entities.SalesPerson", "BusinessEntityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orion.DataAccess.Postgres.Entities.SalesTerritory", "SalesTerritory")
                        .WithMany("SalesPeople")
                        .HasForeignKey("TerritoryID");

                    b.Navigation("Employee");

                    b.Navigation("SalesTerritory");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.SalesPersonQuotaHistory", b =>
                {
                    b.HasOne("Orion.DataAccess.Postgres.Entities.SalesPerson", "SalesPerson")
                        .WithMany("SalesPersonQuotaHistories")
                        .HasForeignKey("BusinessEntityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SalesPerson");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.SalesTaxRate", b =>
                {
                    b.HasOne("Orion.DataAccess.Postgres.Entities.StateProvince", "StateProvince")
                        .WithMany("SalesTaxRates")
                        .HasForeignKey("StateProvinceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StateProvince");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.SalesTerritory", b =>
                {
                    b.HasOne("Orion.DataAccess.Postgres.Entities.CountryRegion", "CountryRegion")
                        .WithMany("SalesTerritories")
                        .HasForeignKey("CountryRegionCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CountryRegion");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.SalesTerritoryHistory", b =>
                {
                    b.HasOne("Orion.DataAccess.Postgres.Entities.SalesPerson", "SalesPerson")
                        .WithMany("SalesTerritoryHistories")
                        .HasForeignKey("BusinessEntityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orion.DataAccess.Postgres.Entities.SalesTerritory", "SalesTerritory")
                        .WithMany("SalesTerritoryHistories")
                        .HasForeignKey("TerritoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SalesPerson");

                    b.Navigation("SalesTerritory");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Shared.BasketItem", b =>
                {
                    b.HasOne("Orion.DataAccess.Postgres.Entities.Shared.Basket", null)
                        .WithMany("Items")
                        .HasForeignKey("BasketId");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Shared.EmployeeAddress", b =>
                {
                    b.HasOne("Orion.DataAccess.Postgres.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orion.DataAccess.Postgres.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Shared.RefreshToken", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Shared.UserProfile", b =>
                {
                    b.HasOne("Orion.Domain.DTO.NotificationSettings", "NotificationSettings")
                        .WithMany()
                        .HasForeignKey("NotificationSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orion.Domain.DTO.PrivacySettings", "PrivacySettings")
                        .WithMany()
                        .HasForeignKey("PrivacySettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotificationSettings");

                    b.Navigation("PrivacySettings");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.ShoppingCartItem", b =>
                {
                    b.HasOne("Orion.DataAccess.Postgres.Entities.Product", "Product")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.SpecialOfferProduct", b =>
                {
                    b.HasOne("Orion.DataAccess.Postgres.Entities.Product", "Product")
                        .WithMany("SpecialOfferProducts")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orion.DataAccess.Postgres.Entities.SpecialOffer", "SpecialOffer")
                        .WithMany("SpecialOfferProducts")
                        .HasForeignKey("SpecialOfferID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SpecialOffer");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.StateProvince", b =>
                {
                    b.HasOne("Orion.DataAccess.Postgres.Entities.CountryRegion", "CountryRegion")
                        .WithMany("StateProvinces")
                        .HasForeignKey("CountryRegionCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orion.DataAccess.Postgres.Entities.SalesTerritory", "SalesTerritory")
                        .WithMany("StateProvinces")
                        .HasForeignKey("TerritoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CountryRegion");

                    b.Navigation("SalesTerritory");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Store", b =>
                {
                    b.HasOne("Orion.DataAccess.Postgres.Entities.BusinessEntity", "BusinessEntity")
                        .WithMany()
                        .HasForeignKey("BusinessEntityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orion.DataAccess.Postgres.Entities.SalesPerson", "SalesPerson")
                        .WithMany("Stores")
                        .HasForeignKey("BusinessEntityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessEntity");

                    b.Navigation("SalesPerson");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.TransactionHistory", b =>
                {
                    b.HasOne("Orion.DataAccess.Postgres.Entities.Product", "Product")
                        .WithMany("TransactionHistories")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Vendor", b =>
                {
                    b.HasOne("Orion.DataAccess.Postgres.Entities.BusinessEntity", "BusinessEntity")
                        .WithMany()
                        .HasForeignKey("BusinessEntityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessEntity");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.WorkOrder", b =>
                {
                    b.HasOne("Orion.DataAccess.Postgres.Entities.Product", "Product")
                        .WithMany("WorkOrders")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orion.DataAccess.Postgres.Entities.ScrapReason", "ScrapReason")
                        .WithMany("WorkOrders")
                        .HasForeignKey("ScrapReasonID");

                    b.Navigation("Product");

                    b.Navigation("ScrapReason");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.WorkOrderRouting", b =>
                {
                    b.HasOne("Orion.DataAccess.Postgres.Entities.Location", "Location")
                        .WithMany("WorkOrderRoutings")
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orion.DataAccess.Postgres.Entities.WorkOrder", "WorkOrder")
                        .WithMany("WorkOrderRoutings")
                        .HasForeignKey("WorkOrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Address", b =>
                {
                    b.Navigation("BusinessEntityAddress");

                    b.Navigation("SalesOrderHeaders");

                    b.Navigation("SalesOrderHeaders1");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.AddressType", b =>
                {
                    b.Navigation("BusinessEntityAddress");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.BusinessEntity", b =>
                {
                    b.Navigation("BusinessEntityAddress");

                    b.Navigation("BusinessEntityContact");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.ContactType", b =>
                {
                    b.Navigation("BusinessEntityContact");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.CountryRegion", b =>
                {
                    b.Navigation("CountryRegionCurrencies");

                    b.Navigation("SalesTerritories");

                    b.Navigation("StateProvinces");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.CreditCard", b =>
                {
                    b.Navigation("PersonCreditCards");

                    b.Navigation("SalesOrderHeaders");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Culture", b =>
                {
                    b.Navigation("ProductModelProductDescriptionCultures");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Currency", b =>
                {
                    b.Navigation("CountryRegionCurrencies");

                    b.Navigation("CurrencyRates");

                    b.Navigation("CurrencyRates1");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.CurrencyRate", b =>
                {
                    b.Navigation("SalesOrderHeaders");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Customer", b =>
                {
                    b.Navigation("SalesOrderHeaders");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Department", b =>
                {
                    b.Navigation("EmployeeDepartmentHistories");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Document", b =>
                {
                    b.Navigation("ProductDocuments");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Employee", b =>
                {
                    b.Navigation("AttendedCourses");

                    b.Navigation("Documents");

                    b.Navigation("EmployeeDepartmentHistories");

                    b.Navigation("EmployeePayHistories");

                    b.Navigation("JobCandidates");

                    b.Navigation("PurchaseOrderHeaders");

                    b.Navigation("SalesPerson");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Illustration", b =>
                {
                    b.Navigation("ProductModelIllustrations");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Location", b =>
                {
                    b.Navigation("ProductInventories");

                    b.Navigation("WorkOrderRoutings");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Person", b =>
                {
                    b.Navigation("BusinessEntityContact");

                    b.Navigation("Customers");

                    b.Navigation("EmailAddresses");

                    b.Navigation("Password");

                    b.Navigation("PersonCreditCards");

                    b.Navigation("PersonPhones");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.PhoneNumberType", b =>
                {
                    b.Navigation("PersonPhones");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Product", b =>
                {
                    b.Navigation("BillOfMaterials");

                    b.Navigation("BillOfMaterials1");

                    b.Navigation("ProductCostHistories");

                    b.Navigation("ProductDocuments");

                    b.Navigation("ProductInventories");

                    b.Navigation("ProductListPriceHistories");

                    b.Navigation("ProductProductPhotos");

                    b.Navigation("ProductReviews");

                    b.Navigation("ProductVendors");

                    b.Navigation("PurchaseOrderDetails");

                    b.Navigation("ShoppingCartItems");

                    b.Navigation("SpecialOfferProducts");

                    b.Navigation("TransactionHistories");

                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.ProductCategory", b =>
                {
                    b.Navigation("ProductSubcategories");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.ProductDescription", b =>
                {
                    b.Navigation("ProductModelProductDescriptionCultures");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.ProductModel", b =>
                {
                    b.Navigation("ProductModelIllustrations");

                    b.Navigation("ProductModelProductDescriptionCultures");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.ProductPhoto", b =>
                {
                    b.Navigation("ProductProductPhotos");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.ProductSubcategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.PurchaseOrderHeader", b =>
                {
                    b.Navigation("PurchaseOrderDetails");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.SalesOrderHeader", b =>
                {
                    b.Navigation("SalesOrderDetails");

                    b.Navigation("SalesOrderHeaderSalesReasons");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.SalesPerson", b =>
                {
                    b.Navigation("SalesOrderHeaders");

                    b.Navigation("SalesPersonQuotaHistories");

                    b.Navigation("SalesTerritoryHistories");

                    b.Navigation("Stores");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.SalesReason", b =>
                {
                    b.Navigation("SalesOrderHeaderSalesReasons");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.SalesTerritory", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("SalesOrderHeaders");

                    b.Navigation("SalesPeople");

                    b.Navigation("SalesTerritoryHistories");

                    b.Navigation("StateProvinces");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.ScrapReason", b =>
                {
                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Shared.Basket", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Shared.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Shift", b =>
                {
                    b.Navigation("EmployeeDepartmentHistories");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.ShipMethod", b =>
                {
                    b.Navigation("PurchaseOrderHeaders");

                    b.Navigation("SalesOrderHeaders");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.SpecialOffer", b =>
                {
                    b.Navigation("SpecialOfferProducts");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.SpecialOfferProduct", b =>
                {
                    b.Navigation("SalesOrderDetails");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.StateProvince", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("SalesTaxRates");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Store", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.UnitMeasure", b =>
                {
                    b.Navigation("BillOfMaterials");

                    b.Navigation("ProductVendors");

                    b.Navigation("Products");

                    b.Navigation("Products1");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.Vendor", b =>
                {
                    b.Navigation("ProductVendors");

                    b.Navigation("PurchaseOrderHeaders");
                });

            modelBuilder.Entity("Orion.DataAccess.Postgres.Entities.WorkOrder", b =>
                {
                    b.Navigation("WorkOrderRoutings");
                });
#pragma warning restore 612, 618
        }
    }
}
